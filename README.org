* Snek API Guide
All filenames are taken relative to project root directory (i.e. location of .git)
** Installing dependencies
-D flag indicates development only dependency
*** Install sequelize and sqlite3 drivers
#+begin_src console
npm install sequelize
npm install sequelize-cli
npm install -D sqlite3
#+end_src
*** Install express and nodemon
#+begin_src console
npm install express
npm install -D nodemon
#+end_src
*** Install and configure dotenv to take env vars
**** Installation
#+begin_src console
npm install dotenv
npm install -D dotenv-cli
#+end_src
**** Defining environment vars
/./env/
#+begin_src sh
DB_PATH=db/dev.db
#+end_src sh
**** Configuration
/./app.js/
#+begin_src js
require("dotenv").config();
const {DB_PATH} = process.env;
#+end_src
** Sequelize configuration
*** Bootstrapping project
**** Create a .sequelizerc config file
//.sequelizerc/
#+BEGIN_SRC js
const path = require("path");
module.exports = {
  config: path.resolve("config", "database.js"),
  "models-path": path.resolve("db", "models"),
  "seeders-path": path.resolve("db", "seeders"),
  "migrations-path": path.resolve("db", "migrations"),
};
#+END_SRC 
**** Bootstrap with sequelize-cli
#+BEGIN_SRC console
npx sequelize-cli init
#+END_SRC 
**** Defining configuration settings
#+BEGIN_SRC js
  module.exports = {
    development: {
      storage: process.env.DB_PATH,
      dialect: "sqlite",
      seederStorage: "sequelize",
      benchmark: true,
      logQueryParameters: true,
      typeValidation: true,
      logging: true,
    },
  };
#+END_SRC 
**** Test configuration via migration
The following should run without error at this point and create a blank dev.db file.
#+BEGIN_SRC console
npx dotenv sequelize db:migrate
#+END_SRC
Undo all migrations so we're starting clean.
#+BEGIN_SRC console
npx dotenv sequelize db:migrate:undo:all
#+END_SRC
** Models and migrations
*** Generating the Score model
#+BEGIN_SRC console
npx sequelize model:generate --name Score --attributes player:string,score:integer
#+END_SRC
After adding some simple validation and limitations on string length, we reflect this change in the migration file up method and perform our migration.
*** Defining migration interface logic
** Integrating Express with ORM
*** Initializing sequelize interface
/./app.js/
#+begin_src js
const {Sequelize} = require("sequelize");

const sequelize = new Sequelize({
  dialect: "sqlite",
  storage: `${DB_PATH}`
});
#+end_src js
*** Testing connection (remove after)
#+begin_src js
try {
  sequelize.authenticate()
    .then(() => "Connection successful!");
} catch (e) {
  console.error("Could not connect!", e);
}
#+end_src js
